
///////////////////////////////////////////////////////////////////
#define F_CPU 14745600UL
#include <avr/io.h>
#include <stdio.h>
#include <util/delay.h>
#include <math.h>
#include <avr/interrupt.h>

#include "usart.h"
#define MAX_RPM 2000
#define reducer 20
#define wheel_half 6.5
#define distanceW 30

#define Calibration_MIN -1000
#define Calibration_MAX 1000

#define ADC_VREF_TYPE 0x00		//A/D 변환기 사용 기준 전압, AREF 단자 사용, 내부 VREF 끄기 설정
#define ADC_AVCC_TYPE 0x40		//A/D 변환기 사용 기준 전압, AVcc 단자와 ARRE에 연결된 커패시터 사용
#define ADC_RES_TYPE 0x00		//A/D 변환기 사용 기준 전압, reserved
#define ADC_2_56_TYPE 0xC0		//A/D 변환기 사용 기준 전압, 내부 2.56V와 AREF에 연결된 커패시터 사용

////////////////////////////////////////
//									  //
//		 U0		   U1				  //
//	ROBOT--master-B--B-slave-joy	  //
//									  //
////////////////////////////////////////


void USART0_slave_init(void)
{
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
	UBRR0H = 0;
	UBRR0L = 7;
	//UBRR1L = 95; 9600 bps
}


void USART1_slave_init(void)
{
	UCSR1B = (1<<TXEN1)|(1<<RXEN1);
	UBRR1H = 0;
	UBRR1L = 7;
	//UBRR1L = 95; 9600 bps
}


void ADC_Init(void)//0100-0000
{
	
	ADCSRA = 0x00; // 0100_0000
	ADMUX = ADC_AVCC_TYPE|(0<<ADLAR);
	
	ADCSRA = (1<< ADEN)|(1<<ADFR)|(1<<ADPS2)|(3<<ADPS0); //분주비 128
}

//ADC read function
unsigned int read_ADC_Data(unsigned char adc_channelSelect)
{

	unsigned int ADC_Data = 0;
	ADMUX &= ~(0xbf); //0100_0000되어야 함 따라서 1011_ffff
	//ADMUX &= ~(0x1f); //1110_0000
	ADMUX |= (adc_channelSelect & 0x07); // 0000_0111
	//ADMUX |= (adc_input & 0x3f); // 0011_1111
	ADCSRA |= (1<<ADSC); //변환 시작
	
	while(!(ADCSRA &(1<<ADIF))); //AD 변환 종료 대기
	
	ADC_Data = ADCL;
	ADC_Data |= ADCH<<8;
	_delay_us(300);
	return ADC_Data;
}




unsigned short CRC16bit(unsigned char *addr, int length)
{
	unsigned short CRC = 0xFFFF;
	
	while (length--)
	{
		CRC ^= *addr++; 
		
		for (int i = 0; i < 8; i++)
		{
			if (CRC & 1)
			{
				CRC >>= 1; //CRC=(CRC>>1)
				CRC ^= 0xA001; //CRC= CRC^0xA001 //1010 0000 0000 0001
			}
			else
			{
				CRC >>= 1;
			}
		}
	}
	return CRC;
}

void sendBuff_USART1(char *str,int length)
{  
	while (length--)
	{
		putch_USART1(*str++);  
	}
}

void putTx_Buff(char addr, unsigned char func, unsigned char start_addr_1, unsigned char start_addr_2, unsigned char resData_1,unsigned char resData_2)
{ //[address,function,starting addr,data,CRC16]
	//ex) [01] _ [06] _[00},{79]_[00},{64] [59},{F8]
	unsigned char rescBuff[100];
	unsigned char resBuffLength = 0;


	rescBuff[resBuffLength++] = addr;               //address
	rescBuff[resBuffLength++] = func;               //function
	
	rescBuff[resBuffLength++] = start_addr_1;         // Starting address high byte만 추출
	rescBuff[resBuffLength++] = start_addr_2;         // Starting address low byte만 추출
	
	rescBuff[resBuffLength++] = resData_1;            //data
	rescBuff[resBuffLength++] = resData_2;            //data

	unsigned short crc = CRC16bit(rescBuff, resBuffLength);
	
	rescBuff[resBuffLength++] = (crc & 0xFF);		    // CRC low "byte"
	rescBuff[resBuffLength++] = (crc >> 8);            // CRC high "byte"
	
	resBuffLength++; 
	sendBuff_USART1(rescBuff,resBuffLength);
	crc = 0;
	memset(rescBuff, 0, resBuffLength);
	
}

   ///////////////////////////////
   //							//
   //	#define MAX_RPM 1000	//
   //	#define wheel_half 6	//
   //	#define distanceW 30	//
   //	#define reducer 20		//
   //							//
   ///////////////////////////////
   
int main(void)
{
	float adc_rawX = 0;
	float adc_rawY = 0;
	
	int linear_velocity;
	//RPM
	int RPM_Left;																			
	int RPM_Right;
	//Velocity
	int velo_Right;  //Vr
	int velo_Left;   //Vl
	int velo_Whole;  //V
	//Angular data
	int Angular_velocity_Right;  //Wr
	int Angular_velocity_Left;	 //Wl
	int Angular_velocity_Whole;  //W
		
	ADC_Init();
	USART1_slave_init();
	
	while(1)
	{
		
		adc_rawX = read_ADC_Data(3);
		_delay_us(300);
		
		adc_rawY = read_ADC_Data(4);
		_delay_us(300);		
		
		//***좌표 값 정규화 ***//
		adc_rawX = adc_rawX-520;//512//ID2
		adc_rawY = adc_rawY-520;//511//ID1
	
		//정규화 data
		int normal_X =(int)((MAX_RPM)/1024)*adc_rawX; 
		int normal_Y =(int)((MAX_RPM)/1024)*adc_rawY;
		
		RPM_Left = normal_X ;
		RPM_Right = normal_Y;
		
		velo_Right = RPM_Right;
		velo_Left = RPM_Left;
		
	//	Angular_velocity_Left = (RPM_Left*2*M_PI)/60;
		//velo_Left = wheel_half*Angular_velocity_Left;
		
	
		//****Right****//
	//	Angular_velocity_Right = (RPM_Right*2*M_PI)/60;
	//	velo_Right = wheel_half*Angular_velocity_Right;
		
		unsigned char DAT1 = velo_Right >> 8;
		unsigned char DAT2 = (velo_Right & 0xff);
		
		int add_data = ((unsigned int)DAT1 << 8) | DAT2;
		int negative_data = ~add_data + 1; 
		
		
		DAT1 = (unsigned char)(negative_data >> 8); // 상위 바이트
		DAT2 = (unsigned char)negative_data;        // 하위 바이트
		
		//좌표 원점좌표
		unsigned char DATA1 = velo_Left >> 8;				
		unsigned char DATA2 = (velo_Left & 0xff);
		
		//deadzone
		
		//**** 선속도 각속도 ****//
		/*velo_Whole = (velo_Left + velo_Right)/2;
		Angular_velocity_Whole = wheel_half*(Angular_velocity_Right -Angular_velocity_Left)/distanceW;*/
		
		putTx_Buff(0x01,0x06,0x00,0x79,DAT1,DAT2);
		_delay_ms(10);
		putTx_Buff(0x02,0x06,0x00,0x79,DATA1,DATA2);
		
		adc_rawX = 0;
		adc_rawY = 0;
		
		_delay_ms(100);
	}
}




